// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Company {
  id             Int     @id @default(autoincrement())
  name           String  @unique @db.VarChar(64)
  canonicalName  String  @unique @map("canonical_name") @db.VarChar(64)
  owners         User[]  @relation(name: "CompanyToUser")
  ownerId        Int?    @map("owner_id")
  aesKey         Json    @map("aes_key")
  virgilId       String  @map("virgil_id") @db.VarChar(64)
  policies       Json
  reportTemplate Json    @map("report_template")
  groups         Group[] @relation(name: "CompanyToGroup")
  consultancy    Boolean @default(false)

  @@map("companies")
}

model User {
  id        Int         @id @default(autoincrement())
  company   Company?    @relation(name: "CompanyToUser", fields: [companyId], references: [id])
  companyId Int         @map("company_id")
  groups    UserGroup[] @relation(name: "UserToUserGroup")
  cognitoId String      @unique @map("cognito_id") @db.VarChar(256)
  email     String      @unique @db.VarChar(256)
  name      String      @db.VarChar(64)
  role      String      @db.VarChar(10)
  virgilId  String      @map("virgil_id") @db.VarChar(64)
  videos    Video[]     @relation(name: "UserToVideo")
  isAdmin   Boolean     @default(false) @map("is_admin")

  @@map("users")
}

model Group {
  id             Int         @id @default(autoincrement())
  company        Company     @relation(name: "CompanyToGroup", fields: [companyId], references: [id])
  companyId      Int         @map("company_id")
  name           String      @db.VarChar(256)
  reportTemplate Json        @map("report_template")
  users          UserGroup[] @relation(name: "GroupToUserGroup")

  @@map("groups")
}

model UserGroup {
  id      Int   @id @default(autoincrement())
  group   Group @relation(name: "GroupToUserGroup", fields: [groupId], references: [id])
  groupId Int   @map("group_id")
  user    User  @relation(name: "UserToUserGroup", fields: [userId], references: [id])
  userId  Int   @map("user_id")

  @@map("user_group")
}

model Video {
  id      Int    @id @default(autoincrement())
  creator User   @relation(name: "UserToVideo", fields: [userId], references: [id])
  userId  Int    @map("user_id")
  vId     String @unique @map("v_id") @db.VarChar(128)
  data    Json

  @@map("videos")
}
